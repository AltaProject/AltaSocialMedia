// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/AltaProject/AltaSocialMedia/domain"
	mock "github.com/stretchr/testify/mock"
)

// DataComment is an autogenerated mock type for the DataComment type
type DataComment struct {
	mock.Mock
}

// DeleteComment provides a mock function with given fields: commentID
func (_m *DataComment) DeleteComment(commentID int) bool {
	ret := _m.Called(commentID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAllComment provides a mock function with given fields:
func (_m *DataComment) GetAllComment() ([]domain.Comment, error) {
	ret := _m.Called()

	var r0 []domain.Comment
	if rf, ok := ret.Get(0).(func() []domain.Comment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostComment provides a mock function with given fields: newComment
func (_m *DataComment) PostComment(newComment domain.Comment) (domain.Comment, error) {
	ret := _m.Called(newComment)

	var r0 domain.Comment
	if rf, ok := ret.Get(0).(func(domain.Comment) domain.Comment); ok {
		r0 = rf(newComment)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Comment) error); ok {
		r1 = rf(newComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDataComment interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataComment creates a new instance of DataComment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataComment(t mockConstructorTestingTNewDataComment) *DataComment {
	mock := &DataComment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
